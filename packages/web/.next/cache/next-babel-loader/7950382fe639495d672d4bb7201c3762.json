{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Scrapper from './Scrapper';\nimport FactoryFifaArena from './FactoryFifaArena';\nimport Database from '@brother.bet/Database';\nimport Api from '@brother.bet/Api';\nexport default class ServiceFifaArena {\n  constructor() {\n    this.baseUrl = 'https://brother.bet';\n    this.urlSource = 'http://stats.cyberarena.live/results.aspx?tab=fifa21';\n    this.localDatabase = this.getDatabase(today);\n    this.api = new Api(this.baseUrl).api;\n    this.database = new Database(this.api);\n  }\n\n  static async updateFifaArena() {\n    try {\n      const contentHTML = await Scrapper.getPageHTML(this.urlSource);\n      const data = await FactoryFifaArena.getGamesResult(contentHTML); // const filteredDatabase = Util.filterDatabase(data.games);\n      // const [database] = await Util.getDatabase();\n\n      return {\n        data: {\n          games: data\n        },\n        code: 200\n      };\n    } catch (error) {\n      return {\n        data: _objectSpread({\n          message: 'Estamos com indisponibilidade no momento, tente novamente mais tarde!'\n        }, error),\n        code: 500\n      };\n    }\n  }\n\n  async getDatabase(initDate) {\n    try {\n      const year = Util.getToday().split('-')[0];\n      const availableDays = this.robot.getAvailableDays('', year, initDate);\n      const database = await this.robot.mountDatabase(availableDays);\n      return database;\n    } catch (error) {\n      console.log(error);\n      console.log('Error in getDatabase.');\n      await this.delay();\n      return this.getDatabase(initDate);\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/mel/Desktop/brother.bet/packages/web/src/pages/api/BotFifaArena/ServiceFifaArena.js"],"names":["Scrapper","FactoryFifaArena","Database","Api","ServiceFifaArena","constructor","baseUrl","urlSource","localDatabase","getDatabase","today","api","database","updateFifaArena","contentHTML","getPageHTML","data","getGamesResult","games","code","error","message","initDate","year","Util","getToday","split","availableDays","robot","getAvailableDays","mountDatabase","console","log","delay"],"mappings":";;;;;;AAAA,OAAOA,QAAP,MAAqB,YAArB;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,GAAP,MAAgB,kBAAhB;AAEA,eAAe,MAAMC,gBAAN,CAAuB;AAEpCC,EAAAA,WAAW,GAAG;AACZ,SAAKC,OAAL,GAAe,qBAAf;AACA,SAAKC,SAAL,GAAiB,sDAAjB;AACA,SAAKC,aAAL,GAAqB,KAAKC,WAAL,CAAiBC,KAAjB,CAArB;AACA,SAAKC,GAAL,GAAW,IAAIR,GAAJ,CAAQ,KAAKG,OAAb,EAAsBK,GAAjC;AACA,SAAKC,QAAL,GAAgB,IAAIV,QAAJ,CAAa,KAAKS,GAAlB,CAAhB;AACD;;AAE2B,eAAfE,eAAe,GAAE;AAC5B,QAAI;AACF,YAAMC,WAAW,GAAG,MAAMd,QAAQ,CAACe,WAAT,CAAqB,KAAKR,SAA1B,CAA1B;AACA,YAAMS,IAAI,GAAG,MAAMf,gBAAgB,CAACgB,cAAjB,CAAgCH,WAAhC,CAAnB,CAFE,CAGF;AACA;;AAEA,aAAO;AAACE,QAAAA,IAAI,EAAE;AAACE,UAAAA,KAAK,EAAEF;AAAR,SAAP;AAAsBG,QAAAA,IAAI,EAAE;AAA5B,OAAP;AACD,KAPD,CAOE,OAAOC,KAAP,EAAc;AACd,aAAO;AAAEJ,QAAAA,IAAI;AAAIK,UAAAA,OAAO,EAAE;AAAb,WACFD,KADE,CAAN;AAECD,QAAAA,IAAI,EAAE;AAFP,OAAP;AAID;AACF;;AAEgB,QAAXV,WAAW,CAACa,QAAD,EAAW;AAC1B,QAAI;AACF,YAAMC,IAAI,GAAGC,IAAI,CAACC,QAAL,GAAgBC,KAAhB,CAAsB,GAAtB,EAA2B,CAA3B,CAAb;AACA,YAAMC,aAAa,GAAG,KAAKC,KAAL,CAAWC,gBAAX,CAA4B,EAA5B,EAAgCN,IAAhC,EAAsCD,QAAtC,CAAtB;AACA,YAAMV,QAAQ,GAAG,MAAM,KAAKgB,KAAL,CAAWE,aAAX,CAAyBH,aAAzB,CAAvB;AACA,aAAOf,QAAP;AACD,KALD,CAKE,OAAOQ,KAAP,EAAc;AACdW,MAAAA,OAAO,CAACC,GAAR,CAAYZ,KAAZ;AACAW,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACA,YAAM,KAAKC,KAAL,EAAN;AACA,aAAO,KAAKxB,WAAL,CAAiBa,QAAjB,CAAP;AACD;AACF;;AAtCmC","sourcesContent":["import Scrapper from './Scrapper';\nimport FactoryFifaArena from './FactoryFifaArena';\nimport Database from '@brother.bet/Database';\nimport Api from '@brother.bet/Api';\n\nexport default class ServiceFifaArena {\n\n  constructor() {\n    this.baseUrl = 'https://brother.bet';\n    this.urlSource = 'http://stats.cyberarena.live/results.aspx?tab=fifa21';\n    this.localDatabase = this.getDatabase(today);\n    this.api = new Api(this.baseUrl).api;\n    this.database = new Database(this.api);\n  }\n\n  static async updateFifaArena(){\n    try {\n      const contentHTML = await Scrapper.getPageHTML(this.urlSource);\n      const data = await FactoryFifaArena.getGamesResult(contentHTML);\n      // const filteredDatabase = Util.filterDatabase(data.games);\n      // const [database] = await Util.getDatabase();\n\n      return {data: {games: data}, code: 200};\n    } catch (error) {\n      return { data : {message: 'Estamos com indisponibilidade no momento, tente novamente mais tarde!',\n              ...error},\n              code: 500\n            };\n    }\n  }\n\n  async getDatabase(initDate) {\n    try {\n      const year = Util.getToday().split('-')[0];\n      const availableDays = this.robot.getAvailableDays('', year, initDate);\n      const database = await this.robot.mountDatabase(availableDays);\n      return database;\n    } catch (error) {\n      console.log(error);\n      console.log('Error in getDatabase.');\n      await this.delay();\n      return this.getDatabase(initDate);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}