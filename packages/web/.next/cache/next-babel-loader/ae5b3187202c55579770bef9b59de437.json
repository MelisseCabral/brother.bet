{"ast":null,"code":"import puppeteer from 'puppeteer';\nexport default class Scrapper {\n  static async getPageHTML(url) {\n    const browser = await puppeteer.launch();\n    const page = await browser.newPage();\n    await page.goto(url, {\n      waitUntil: 'networkidle2'\n    });\n    const content = await page.evaluate(() => {\n      let row = [];\n      rows.map((item, index) => {\n        if (index > 0 && item.innerText.split(':').length === 4) {\n          const arrayLine = item.innerText.split('\\t');\n          const link = item.querySelector('td > a');\n          lines.push({\n            time: arrayLine[0],\n            video: link.getAttribute('href'),\n            teamA: {\n              team: arrayLine[1],\n              user: arrayLine[2],\n              firstHalf: arrayLine[3].split(' ')[0],\n              secondHalf: arrayLine[3].split(' ')[1]\n            },\n            teamB: {\n              team: arrayLine[4],\n              user: arrayLine[5],\n              firstHalf: arrayLine[3].split(' ')[0],\n              secondHalf: arrayLine[3].split(' ')[1]\n            }\n          });\n        }\n      });\n    });\n    await browser.close();\n    return content;\n  }\n\n}","map":{"version":3,"sources":["/Users/mel/Desktop/brother.bet/packages/web/src/pages/api/BotFifaArena/Scrapper.js"],"names":["puppeteer","Scrapper","getPageHTML","url","browser","launch","page","newPage","goto","waitUntil","content","evaluate","row","rows","map","item","index","innerText","split","length","arrayLine","link","querySelector","lines","push","time","video","getAttribute","teamA","team","user","firstHalf","secondHalf","teamB","close"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,WAAtB;AAEA,eAAe,MAAMC,QAAN,CAAe;AACJ,eAAXC,WAAW,CAACC,GAAD,EAAM;AAC5B,UAAMC,OAAO,GAAG,MAAMJ,SAAS,CAACK,MAAV,EAAtB;AACA,UAAMC,IAAI,GAAG,MAAMF,OAAO,CAACG,OAAR,EAAnB;AACA,UAAMD,IAAI,CAACE,IAAL,CAAUL,GAAV,EAAe;AAAEM,MAAAA,SAAS,EAAE;AAAb,KAAf,CAAN;AAEA,UAAMC,OAAO,GAAG,MAAMJ,IAAI,CAACK,QAAL,CAAc,MAAM;AACxC,UAAIC,GAAG,GAAG,EAAV;AACAC,MAAAA,IAAI,CAACC,GAAL,CAAS,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACxB,YAAIA,KAAK,GAAG,CAAR,IAAaD,IAAI,CAACE,SAAL,CAAeC,KAAf,CAAqB,GAArB,EAA0BC,MAA1B,KAAqC,CAAtD,EAAyD;AACvD,gBAAMC,SAAS,GAAGL,IAAI,CAACE,SAAL,CAAeC,KAAf,CAAqB,IAArB,CAAlB;AACA,gBAAMG,IAAI,GAAGN,IAAI,CAACO,aAAL,CAAmB,QAAnB,CAAb;AACAC,UAAAA,KAAK,CAACC,IAAN,CAAW;AACTC,YAAAA,IAAI,EAAEL,SAAS,CAAC,CAAD,CADN;AAETM,YAAAA,KAAK,EAAEL,IAAI,CAACM,YAAL,CAAkB,MAAlB,CAFE;AAGTC,YAAAA,KAAK,EAAE;AACLC,cAAAA,IAAI,EAAET,SAAS,CAAC,CAAD,CADV;AAELU,cAAAA,IAAI,EAAEV,SAAS,CAAC,CAAD,CAFV;AAGLW,cAAAA,SAAS,EAAEX,SAAS,CAAC,CAAD,CAAT,CAAaF,KAAb,CAAmB,GAAnB,EAAwB,CAAxB,CAHN;AAILc,cAAAA,UAAU,EAAEZ,SAAS,CAAC,CAAD,CAAT,CAAaF,KAAb,CAAmB,GAAnB,EAAwB,CAAxB;AAJP,aAHE;AASTe,YAAAA,KAAK,EAAE;AACLJ,cAAAA,IAAI,EAAET,SAAS,CAAC,CAAD,CADV;AAELU,cAAAA,IAAI,EAAEV,SAAS,CAAC,CAAD,CAFV;AAGLW,cAAAA,SAAS,EAAEX,SAAS,CAAC,CAAD,CAAT,CAAaF,KAAb,CAAmB,GAAnB,EAAwB,CAAxB,CAHN;AAILc,cAAAA,UAAU,EAAEZ,SAAS,CAAC,CAAD,CAAT,CAAaF,KAAb,CAAmB,GAAnB,EAAwB,CAAxB;AAJP;AATE,WAAX;AAgBD;AACF,OArBD;AAsBD,KAxBqB,CAAtB;AA0BA,UAAMd,OAAO,CAAC8B,KAAR,EAAN;AACA,WAAOxB,OAAP;AACD;;AAlC2B","sourcesContent":["import puppeteer from 'puppeteer'\n\nexport default class Scrapper {\n  static async getPageHTML(url) {\n    const browser = await puppeteer.launch()\n    const page = await browser.newPage()\n    await page.goto(url, { waitUntil: 'networkidle2' })\n\n    const content = await page.evaluate(() => {\n      let row = []\n      rows.map((item, index) => {\n        if (index > 0 && item.innerText.split(':').length === 4) {\n          const arrayLine = item.innerText.split('\\t')\n          const link = item.querySelector('td > a')\n          lines.push({\n            time: arrayLine[0],\n            video: link.getAttribute('href'),\n            teamA: {\n              team: arrayLine[1],\n              user: arrayLine[2],\n              firstHalf: arrayLine[3].split(' ')[0],\n              secondHalf: arrayLine[3].split(' ')[1],\n            },\n            teamB: {\n              team: arrayLine[4],\n              user: arrayLine[5],\n              firstHalf: arrayLine[3].split(' ')[0],\n              secondHalf: arrayLine[3].split(' ')[1],\n            },\n          })\n        }\n      });\n    })\n\n    await browser.close()\n    return content\n  }\n}\n"]},"metadata":{},"sourceType":"module"}