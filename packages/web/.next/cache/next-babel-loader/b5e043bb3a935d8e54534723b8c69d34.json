{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Scrapper from './Scrapper';\nimport FactoryFifaArena from './FactoryFifaArena';\nimport Database from '@brother.bet/Database';\nimport Api from '@brother.bet/Api';\nimport Util from './Util';\nexport default class ServiceFifaArena {\n  constructor() {\n    this.baseUrl = 'https://brother.bet';\n    this.urlSource = 'http://stats.cyberarena.live/results.aspx?tab=fifa21';\n    this.localDatabase = this.getDatabase(today);\n    this.api = new Api(this.baseUrl).api;\n    this.database = new Database(this.api);\n  }\n\n  static async updateFifaArena() {\n    try {\n      const contentHTML = await Scrapper.getPageHTML(this.urlSource, this.today);\n      const data = await FactoryFifaArena.getGamesResult(contentHTML); // const filteredDatabase = Util.filterDatabase(data.games);\n      // const [database] = await Util.getDatabase();\n\n      return {\n        data: {\n          games: data\n        },\n        code: 200\n      };\n    } catch (error) {\n      return {\n        data: _objectSpread({\n          message: 'Estamos com indisponibilidade no momento, tente novamente mais tarde!'\n        }, error),\n        code: 500\n      };\n    }\n  }\n\n  async updateDaysAgo({\n    daysAgo\n  }) {\n    try {\n      const manyDaysAgo = this.robot.getPastDays(daysAgo);\n      const year = manyDaysAgo[0].split('-')[0];\n      const database = await this.getDatabase(manyDaysAgo);\n      await this.database.setData(year, database);\n      this.localDatabase = [...this.localDatabase, ...database];\n      return database;\n    } catch (error) {\n      console.log(error);\n      console.log('Error in updateLastWeek.');\n      await this.delay();\n      return this.updateLastWeek(daysAgo);\n    }\n  }\n\n  async getDatabase(initDate) {\n    try {\n      const year = Util.getToday().split('-')[0];\n      const availableDays = this.robot.getAvailableDays('', year, initDate);\n      const database = await this.robot.mountDatabase(availableDays);\n      return database;\n    } catch (error) {\n      console.log(error);\n      console.log('Error in getDatabase.');\n      await this.delay();\n      return this.getDatabase(initDate);\n    }\n  }\n\n  async updateDaysAgo({\n    daysAgo\n  }) {\n    try {\n      const manyDaysAgo = this.robot.getPastDays(daysAgo);\n      const year = manyDaysAgo[0].split('-')[0];\n      const database = await this.getDatabase(manyDaysAgo);\n      await this.database.setData(year, database);\n      this.localDatabase = [...this.localDatabase, ...database];\n      return database;\n    } catch (error) {\n      console.log(error);\n      console.log('Error in updateLastWeek.');\n      await this.delay();\n      return this.updateLastWeek(daysAgo);\n    }\n  }\n\n  async clean(year) {\n    const daysToFilter = await this.database.getDays(year);\n\n    for (const day of daysToFilter) {\n      const dataDay = await this.database.getData(day);\n      const {\n        length\n      } = dataDay.data;\n      const {\n        date\n      } = dataDay;\n\n      if (!length) {\n        console.log('Deleting day ', date, ', with length of:', length);\n        await this.delay();\n        const response = await this.database.deleteData(date);\n        console.log(response);\n      }\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/mel/Desktop/brother.bet/packages/web/src/pages/api/BotFifaArena/ServiceFifaArena.js"],"names":["Scrapper","FactoryFifaArena","Database","Api","Util","ServiceFifaArena","constructor","baseUrl","urlSource","localDatabase","getDatabase","today","api","database","updateFifaArena","contentHTML","getPageHTML","data","getGamesResult","games","code","error","message","updateDaysAgo","daysAgo","manyDaysAgo","robot","getPastDays","year","split","setData","console","log","delay","updateLastWeek","initDate","getToday","availableDays","getAvailableDays","mountDatabase","clean","daysToFilter","getDays","day","dataDay","getData","length","date","response","deleteData"],"mappings":"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","sourcesContent":["import Scrapper from './Scrapper';\nimport FactoryFifaArena from './FactoryFifaArena';\nimport Database from '@brother.bet/Database';\nimport Api from '@brother.bet/Api';\nimport Util from './Util';\n\nexport default class ServiceFifaArena {\n\n  constructor() {\n    this.baseUrl = 'https://brother.bet';\n    this.urlSource = 'http://stats.cyberarena.live/results.aspx?tab=fifa21';\n    this.localDatabase = this.getDatabase(today);\n    this.api = new Api(this.baseUrl).api;\n    this.database = new Database(this.api);\n  }\n\n  static async updateFifaArena(){\n    try {\n      const contentHTML = await Scrapper.getPageHTML(this.urlSource, this.today);\n      const data = await FactoryFifaArena.getGamesResult(contentHTML);\n      // const filteredDatabase = Util.filterDatabase(data.games);\n      // const [database] = await Util.getDatabase();\n\n      return {data: {games: data}, code: 200};\n    } catch (error) {\n      return { data : {message: 'Estamos com indisponibilidade no momento, tente novamente mais tarde!',\n              ...error},\n              code: 500\n            };\n    }\n  }\n  async updateDaysAgo({ daysAgo }) {\n    try {\n      const manyDaysAgo = this.robot.getPastDays(daysAgo);\n      const year = manyDaysAgo[0].split('-')[0];\n      const database = await this.getDatabase(manyDaysAgo);\n      await this.database.setData(year, database);\n      this.localDatabase = [...this.localDatabase, ...database];\n      return database;\n    } catch (error) {\n      console.log(error);\n      console.log('Error in updateLastWeek.');\n      await this.delay();\n      return this.updateLastWeek(daysAgo);\n    }\n  }\n\n  async getDatabase(initDate) {\n    try {\n      const year = Util.getToday().split('-')[0];\n      const availableDays = this.robot.getAvailableDays('', year, initDate);\n      const database = await this.robot.mountDatabase(availableDays);\n      return database;\n    } catch (error) {\n      console.log(error);\n      console.log('Error in getDatabase.');\n      await this.delay();\n      return this.getDatabase(initDate);\n    }\n  }\n\n  async updateDaysAgo({ daysAgo }) {\n    try {\n      const manyDaysAgo = this.robot.getPastDays(daysAgo);\n      const year = manyDaysAgo[0].split('-')[0];\n      const database = await this.getDatabase(manyDaysAgo);\n      await this.database.setData(year, database);\n      this.localDatabase = [...this.localDatabase, ...database];\n      return database;\n    } catch (error) {\n      console.log(error);\n      console.log('Error in updateLastWeek.');\n      await this.delay();\n      return this.updateLastWeek(daysAgo);\n    }\n  }\n\n  async clean(year) {\n    const daysToFilter = await this.database.getDays(year);\n    for (const day of daysToFilter) {\n      const dataDay = await this.database.getData(day);\n      const { length } = dataDay.data;\n      const { date } = dataDay;\n\n      if (!length) {\n        console.log('Deleting day ', date, ', with length of:', length);\n        await this.delay();\n        const response = await this.database.deleteData(date);\n        console.log(response);\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}