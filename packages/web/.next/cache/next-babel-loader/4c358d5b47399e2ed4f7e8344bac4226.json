{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Scrapper from './Scrapper';\nimport FactoryFifaArena from './FactoryFifaArena';\nexport default class ServiceFifaArena {\n  constructor() {\n    this.baseUrl = 'https://brother.bet';\n  }\n\n  static async updateFifaArena() {\n    try {\n      const contentHTML = await Scrapper.getPageHTML('http://stats.cyberarena.live/results.aspx?tab=fifa21', '2021-02-01');\n      const data = await FactoryFifaArena.getGamesResult(contentHTML); // const filteredDatabase = Util.filterDatabase(data.games);\n      // const [database] = await Util.getDatabase();\n\n      return {\n        data: {\n          games: data\n        },\n        code: 200\n      };\n    } catch (error) {\n      return {\n        data: _objectSpread({\n          message: 'Estamos com indisponibilidade no momento, tente novamente mais tarde!'\n        }, error),\n        code: 500\n      };\n    }\n  }\n\n  async getDatabase(initDate) {\n    try {\n      const year = Util.getToday().split('-')[0];\n      const availableDays = this.robot.getAvailableDays('', year, initDate);\n      const database = await this.robot.mountDatabase(availableDays);\n      return database;\n    } catch (error) {\n      console.log(error);\n      console.log('Error in getDatabase.');\n      await this.delay();\n      return this.getDatabase(initDate);\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/mel/Desktop/brother.bet/packages/web/src/pages/api/BotFifaArena/ServiceFifaArena.js"],"names":["Scrapper","FactoryFifaArena","ServiceFifaArena","constructor","baseUrl","updateFifaArena","contentHTML","getPageHTML","data","getGamesResult","games","code","error","message","getDatabase","initDate","year","Util","getToday","split","availableDays","robot","getAvailableDays","database","mountDatabase","console","log","delay"],"mappings":";;;;;;AAAA,OAAOA,QAAP,MAAqB,YAArB;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AAEA,eAAe,MAAMC,gBAAN,CAAuB;AACpCC,EAAAA,WAAW,GAAG;AACZ,SAAKC,OAAL,GAAe,qBAAf;AACD;;AAE2B,eAAfC,eAAe,GAAG;AAC7B,QAAI;AACF,YAAMC,WAAW,GAAG,MAAMN,QAAQ,CAACO,WAAT,CACxB,sDADwB,EACgC,YADhC,CAA1B;AAGA,YAAMC,IAAI,GAAG,MAAMP,gBAAgB,CAACQ,cAAjB,CAAgCH,WAAhC,CAAnB,CAJE,CAKF;AACA;;AAEA,aAAO;AAAEE,QAAAA,IAAI,EAAE;AAAEE,UAAAA,KAAK,EAAEF;AAAT,SAAR;AAAyBG,QAAAA,IAAI,EAAE;AAA/B,OAAP;AACD,KATD,CASE,OAAOC,KAAP,EAAc;AACd,aAAO;AACLJ,QAAAA,IAAI;AACFK,UAAAA,OAAO,EAAE;AADP,WAECD,KAFD,CADC;AAKLD,QAAAA,IAAI,EAAE;AALD,OAAP;AAOD;AACF;;AAEgB,QAAXG,WAAW,CAACC,QAAD,EAAW;AAC1B,QAAI;AACF,YAAMC,IAAI,GAAGC,IAAI,CAACC,QAAL,GAAgBC,KAAhB,CAAsB,GAAtB,EAA2B,CAA3B,CAAb;AACA,YAAMC,aAAa,GAAG,KAAKC,KAAL,CAAWC,gBAAX,CAA4B,EAA5B,EAAgCN,IAAhC,EAAsCD,QAAtC,CAAtB;AACA,YAAMQ,QAAQ,GAAG,MAAM,KAAKF,KAAL,CAAWG,aAAX,CAAyBJ,aAAzB,CAAvB;AACA,aAAOG,QAAP;AACD,KALD,CAKE,OAAOX,KAAP,EAAc;AACda,MAAAA,OAAO,CAACC,GAAR,CAAYd,KAAZ;AACAa,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACA,YAAM,KAAKC,KAAL,EAAN;AACA,aAAO,KAAKb,WAAL,CAAiBC,QAAjB,CAAP;AACD;AACF;;AAtCmC","sourcesContent":["import Scrapper from './Scrapper'\nimport FactoryFifaArena from './FactoryFifaArena'\n\nexport default class ServiceFifaArena {\n  constructor() {\n    this.baseUrl = 'https://brother.bet'\n  }\n\n  static async updateFifaArena() {\n    try {\n      const contentHTML = await Scrapper.getPageHTML(\n        'http://stats.cyberarena.live/results.aspx?tab=fifa21', '2021-02-01'\n      )\n      const data = await FactoryFifaArena.getGamesResult(contentHTML);\n      // const filteredDatabase = Util.filterDatabase(data.games);\n      // const [database] = await Util.getDatabase();\n\n      return { data: { games: data }, code: 200 }\n    } catch (error) {\n      return {\n        data: {\n          message: 'Estamos com indisponibilidade no momento, tente novamente mais tarde!',\n          ...error,\n        },\n        code: 500,\n      }\n    }\n  }\n\n  async getDatabase(initDate) {\n    try {\n      const year = Util.getToday().split('-')[0]\n      const availableDays = this.robot.getAvailableDays('', year, initDate)\n      const database = await this.robot.mountDatabase(availableDays)\n      return database\n    } catch (error) {\n      console.log(error)\n      console.log('Error in getDatabase.')\n      await this.delay()\n      return this.getDatabase(initDate)\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}