{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Scrapper from './Scrapper';\nimport FactoryFifaArena from './FactoryFifaArena';\nimport Util from '@brother.bet/Util';\nimport Database from '@brother.bet/Database';\nimport Api from '@brother.bet/Api';\nexport default class ServiceFifaArena {\n  constructor() {\n    this.baseUrl = 'https://brother.bet';\n    this.urlSource = 'http://stats.cyberarena.live/results.aspx?tab=fifa21';\n    this.localDatabase = this.getDatabase(today);\n    this.api = new Api(this.baseUrl).api;\n    this.database = new Database(this.api);\n    this.delay = Util.delay;\n  }\n\n  static async updateFifaArena() {\n    try {\n      const contentHTML = await Scrapper.getPageHTML(this.urlSource, this.today);\n      const data = await FactoryFifaArena.getGamesResult(contentHTML);\n      console.log(localDatabase);\n      return {\n        data: {\n          games: data\n        },\n        code: 200\n      };\n    } catch (error) {\n      return {\n        data: _objectSpread({\n          message: 'Estamos com indisponibilidade no momento, tente novamente mais tarde!'\n        }, error),\n        code: 500\n      };\n    }\n  }\n\n  async updateDaysAgo({\n    daysAgo\n  }) {\n    try {\n      const manyDaysAgo = this.robot.getPastDays(daysAgo);\n      const year = manyDaysAgo[0].split('-')[0];\n      const database = await this.getDatabase(manyDaysAgo);\n      await this.database.setData(year, database);\n      this.localDatabase = [...this.localDatabase, ...database];\n      return database;\n    } catch (error) {\n      console.log(error);\n      console.log('Error in updateLastWeek.');\n      await this.delay();\n      return this.updateLastWeek(daysAgo);\n    }\n  }\n\n  getToday() {\n    const d = new Date();\n    const myTZO = -180;\n    const myNewDate = new Date(d.getTime() + 60000 * (d.getTimezoneOffset() - myTZO));\n    const today = myNewDate.toISOString().slice(0, 10);\n    return today;\n  }\n\n}","map":{"version":3,"sources":["/Users/mel/Desktop/brother.bet/packages/web/src/pages/api/BotFifaArena/ServiceFifaArena.js"],"names":["Scrapper","FactoryFifaArena","Util","Database","Api","ServiceFifaArena","constructor","baseUrl","urlSource","localDatabase","getDatabase","today","api","database","delay","updateFifaArena","contentHTML","getPageHTML","data","getGamesResult","console","log","games","code","error","message","updateDaysAgo","daysAgo","manyDaysAgo","robot","getPastDays","year","split","setData","updateLastWeek","getToday","d","Date","myTZO","myNewDate","getTime","getTimezoneOffset","toISOString","slice"],"mappings":";;;;;;AAAA,OAAOA,QAAP,MAAqB,YAArB;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,GAAP,MAAgB,kBAAhB;AAEA,eAAe,MAAMC,gBAAN,CAAuB;AAEpCC,EAAAA,WAAW,GAAG;AACZ,SAAKC,OAAL,GAAe,qBAAf;AACA,SAAKC,SAAL,GAAiB,sDAAjB;AACA,SAAKC,aAAL,GAAqB,KAAKC,WAAL,CAAiBC,KAAjB,CAArB;AACA,SAAKC,GAAL,GAAW,IAAIR,GAAJ,CAAQ,KAAKG,OAAb,EAAsBK,GAAjC;AACA,SAAKC,QAAL,GAAgB,IAAIV,QAAJ,CAAa,KAAKS,GAAlB,CAAhB;AACA,SAAKE,KAAL,GAAaZ,IAAI,CAACY,KAAlB;AACD;;AAE2B,eAAfC,eAAe,GAAE;AAC5B,QAAI;AACF,YAAMC,WAAW,GAAG,MAAMhB,QAAQ,CAACiB,WAAT,CAAqB,KAAKT,SAA1B,EAAqC,KAAKG,KAA1C,CAA1B;AACA,YAAMO,IAAI,GAAG,MAAMjB,gBAAgB,CAACkB,cAAjB,CAAgCH,WAAhC,CAAnB;AACAI,MAAAA,OAAO,CAACC,GAAR,CAAYZ,aAAZ;AACA,aAAO;AAACS,QAAAA,IAAI,EAAE;AAACI,UAAAA,KAAK,EAAEJ;AAAR,SAAP;AAAsBK,QAAAA,IAAI,EAAE;AAA5B,OAAP;AACD,KALD,CAKE,OAAOC,KAAP,EAAc;AACd,aAAO;AAAEN,QAAAA,IAAI;AAAIO,UAAAA,OAAO,EAAE;AAAb,WACFD,KADE,CAAN;AAECD,QAAAA,IAAI,EAAE;AAFP,OAAP;AAID;AACF;;AACkB,QAAbG,aAAa,CAAC;AAAEC,IAAAA;AAAF,GAAD,EAAc;AAC/B,QAAI;AACF,YAAMC,WAAW,GAAG,KAAKC,KAAL,CAAWC,WAAX,CAAuBH,OAAvB,CAApB;AACA,YAAMI,IAAI,GAAGH,WAAW,CAAC,CAAD,CAAX,CAAeI,KAAf,CAAqB,GAArB,EAA0B,CAA1B,CAAb;AACA,YAAMnB,QAAQ,GAAG,MAAM,KAAKH,WAAL,CAAiBkB,WAAjB,CAAvB;AACA,YAAM,KAAKf,QAAL,CAAcoB,OAAd,CAAsBF,IAAtB,EAA4BlB,QAA5B,CAAN;AACA,WAAKJ,aAAL,GAAqB,CAAC,GAAG,KAAKA,aAAT,EAAwB,GAAGI,QAA3B,CAArB;AACA,aAAOA,QAAP;AACD,KAPD,CAOE,OAAOW,KAAP,EAAc;AACdJ,MAAAA,OAAO,CAACC,GAAR,CAAYG,KAAZ;AACAJ,MAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACA,YAAM,KAAKP,KAAL,EAAN;AACA,aAAO,KAAKoB,cAAL,CAAoBP,OAApB,CAAP;AACD;AACF;;AAEDQ,EAAAA,QAAQ,GAAG;AACT,UAAMC,CAAC,GAAG,IAAIC,IAAJ,EAAV;AACA,UAAMC,KAAK,GAAG,CAAC,GAAf;AACA,UAAMC,SAAS,GAAG,IAAIF,IAAJ,CAASD,CAAC,CAACI,OAAF,KAAc,SAASJ,CAAC,CAACK,iBAAF,KAAwBH,KAAjC,CAAvB,CAAlB;AACA,UAAM3B,KAAK,GAAG4B,SAAS,CAACG,WAAV,GAAwBC,KAAxB,CAA8B,CAA9B,EAAiC,EAAjC,CAAd;AACA,WAAOhC,KAAP;AACD;;AA9CmC","sourcesContent":["import Scrapper from './Scrapper';\nimport FactoryFifaArena from './FactoryFifaArena';\nimport Util from '@brother.bet/Util';\nimport Database from '@brother.bet/Database';\nimport Api from '@brother.bet/Api';\n\nexport default class ServiceFifaArena {\n\n  constructor() {\n    this.baseUrl = 'https://brother.bet';\n    this.urlSource = 'http://stats.cyberarena.live/results.aspx?tab=fifa21';\n    this.localDatabase = this.getDatabase(today);\n    this.api = new Api(this.baseUrl).api;\n    this.database = new Database(this.api);\n    this.delay = Util.delay;\n  }\n\n  static async updateFifaArena(){\n    try {\n      const contentHTML = await Scrapper.getPageHTML(this.urlSource, this.today);\n      const data = await FactoryFifaArena.getGamesResult(contentHTML);\n      console.log(localDatabase)\n      return {data: {games: data}, code: 200};\n    } catch (error) {\n      return { data : {message: 'Estamos com indisponibilidade no momento, tente novamente mais tarde!',\n              ...error},\n              code: 500\n            };\n    }\n  }\n  async updateDaysAgo({ daysAgo }) {\n    try {\n      const manyDaysAgo = this.robot.getPastDays(daysAgo);\n      const year = manyDaysAgo[0].split('-')[0];\n      const database = await this.getDatabase(manyDaysAgo);\n      await this.database.setData(year, database);\n      this.localDatabase = [...this.localDatabase, ...database];\n      return database;\n    } catch (error) {\n      console.log(error);\n      console.log('Error in updateLastWeek.');\n      await this.delay();\n      return this.updateLastWeek(daysAgo);\n    }\n  }\n\n  getToday() {\n    const d = new Date();\n    const myTZO = -180;\n    const myNewDate = new Date(d.getTime() + 60000 * (d.getTimezoneOffset() - myTZO));\n    const today = myNewDate.toISOString().slice(0, 10);\n    return today;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}