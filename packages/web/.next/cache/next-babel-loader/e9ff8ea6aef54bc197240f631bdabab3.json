{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Scrapper from './Scrapper';\nimport FactoryFifaArena from './FactoryFifaArena';\n\nconst Database = require('@brother.bet/Database');\n\nconst Api = require('@brother.bet/Api');\n\nconst Util = require('@brother.bet/Util');\n\nconst Misc = require('./Misc');\n\nexport default class ServiceFifaArena {\n  constructor() {\n    this.baseUrl = 'https://brother.bet';\n  }\n\n  static async updateFifaArena() {\n    try {\n      const contentHTML = await Scrapper.getPageHTML('http://stats.cyberarena.live/results.aspx?tab=fifa21', '2021-02-01');\n      const data = await FactoryFifaArena.getGamesResult(contentHTML);\n      const api = new Api('https://brother.bet').api;\n      const database = new Database(api);\n      const obj = [{\n        date: '2021.03.05',\n        data: data,\n        id: 'noUniqueId'\n      }];\n      await database.setData('2021', obj).then(resp => {\n        console.log(resp);\n      }).catch(error => {\n        console.log(error);\n      });\n      return {\n        message: `Dados de ${lastDay} atualizados com sucesso.`,\n        code: 200\n      };\n    } catch (error) {\n      return {\n        data: _objectSpread({\n          message: 'Estamos com indisponibilidade no momento, tente novamente mais tarde!'\n        }, error),\n        code: 500\n      };\n    }\n  }\n\n  async getDatabase(initDate) {\n    try {\n      const year = Util.getToday().split('-')[0];\n      const availableDays = this.robot.getAvailableDays('', year, initDate);\n      const database = await this.robot.mountDatabase(availableDays);\n      return database;\n    } catch (error) {\n      console.log(error);\n      console.log('Error in getDatabase.');\n      await this.delay();\n      return this.getDatabase(initDate);\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/mel/Desktop/brother.bet/packages/web/src/pages/api/BotFifaArena/ServiceFifaArena.js"],"names":["Scrapper","FactoryFifaArena","Database","require","Api","Util","Misc","ServiceFifaArena","constructor","baseUrl","updateFifaArena","contentHTML","getPageHTML","data","getGamesResult","api","database","obj","date","id","setData","then","resp","console","log","catch","error","message","lastDay","code","getDatabase","initDate","year","getToday","split","availableDays","robot","getAvailableDays","mountDatabase","delay"],"mappings":";;;;;;AAAA,OAAOA,QAAP,MAAqB,YAArB;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;;AACA,MAAMC,QAAQ,GAAGC,OAAO,CAAC,uBAAD,CAAxB;;AACA,MAAMC,GAAG,GAAGD,OAAO,CAAC,kBAAD,CAAnB;;AACA,MAAME,IAAI,GAAGF,OAAO,CAAC,mBAAD,CAApB;;AACA,MAAMG,IAAI,GAAGH,OAAO,CAAC,QAAD,CAApB;;AAEA,eAAe,MAAMI,gBAAN,CAAuB;AACpCC,EAAAA,WAAW,GAAG;AACZ,SAAKC,OAAL,GAAe,qBAAf;AACD;;AAE2B,eAAfC,eAAe,GAAG;AAC7B,QAAI;AACF,YAAMC,WAAW,GAAG,MAAMX,QAAQ,CAACY,WAAT,CACxB,sDADwB,EAExB,YAFwB,CAA1B;AAIA,YAAMC,IAAI,GAAG,MAAMZ,gBAAgB,CAACa,cAAjB,CAAgCH,WAAhC,CAAnB;AACA,YAAMI,GAAG,GAAG,IAAIX,GAAJ,CAAQ,qBAAR,EAA+BW,GAA3C;AACA,YAAMC,QAAQ,GAAG,IAAId,QAAJ,CAAaa,GAAb,CAAjB;AAEA,YAAME,GAAG,GAAG,CAAC;AAAEC,QAAAA,IAAI,EAAE,YAAR;AAAsBL,QAAAA,IAAI,EAAEA,IAA5B;AAAkCM,QAAAA,EAAE,EAAE;AAAtC,OAAD,CAAZ;AACA,YAAMH,QAAQ,CACXI,OADG,CACK,MADL,EACaH,GADb,EAEHI,IAFG,CAEGC,IAAD,IAAU;AACdC,QAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACD,OAJG,EAKHG,KALG,CAKIC,KAAD,IAAW;AAChBH,QAAAA,OAAO,CAACC,GAAR,CAAYE,KAAZ;AACD,OAPG,CAAN;AASA,aAAO;AAAEC,QAAAA,OAAO,EAAG,YAAWC,OAAQ,2BAA/B;AAA2DC,QAAAA,IAAI,EAAE;AAAjE,OAAP;AACD,KApBD,CAoBE,OAAOH,KAAP,EAAc;AACd,aAAO;AACLb,QAAAA,IAAI;AACFc,UAAAA,OAAO,EAAE;AADP,WAECD,KAFD,CADC;AAKLG,QAAAA,IAAI,EAAE;AALD,OAAP;AAOD;AACF;;AAEgB,QAAXC,WAAW,CAACC,QAAD,EAAW;AAC1B,QAAI;AACF,YAAMC,IAAI,GAAG3B,IAAI,CAAC4B,QAAL,GAAgBC,KAAhB,CAAsB,GAAtB,EAA2B,CAA3B,CAAb;AACA,YAAMC,aAAa,GAAG,KAAKC,KAAL,CAAWC,gBAAX,CAA4B,EAA5B,EAAgCL,IAAhC,EAAsCD,QAAtC,CAAtB;AACA,YAAMf,QAAQ,GAAG,MAAM,KAAKoB,KAAL,CAAWE,aAAX,CAAyBH,aAAzB,CAAvB;AACA,aAAOnB,QAAP;AACD,KALD,CAKE,OAAOU,KAAP,EAAc;AACdH,MAAAA,OAAO,CAACC,GAAR,CAAYE,KAAZ;AACAH,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACA,YAAM,KAAKe,KAAL,EAAN;AACA,aAAO,KAAKT,WAAL,CAAiBC,QAAjB,CAAP;AACD;AACF;;AAjDmC","sourcesContent":["import Scrapper from './Scrapper'\nimport FactoryFifaArena from './FactoryFifaArena'\nconst Database = require('@brother.bet/Database')\nconst Api = require('@brother.bet/Api')\nconst Util = require('@brother.bet/Util')\nconst Misc = require('./Misc')\n\nexport default class ServiceFifaArena {\n  constructor() {\n    this.baseUrl = 'https://brother.bet'\n  }\n\n  static async updateFifaArena() {\n    try {\n      const contentHTML = await Scrapper.getPageHTML(\n        'http://stats.cyberarena.live/results.aspx?tab=fifa21',\n        '2021-02-01'\n      )\n      const data = await FactoryFifaArena.getGamesResult(contentHTML)\n      const api = new Api('https://brother.bet').api\n      const database = new Database(api)\n\n      const obj = [{ date: '2021.03.05', data: data, id: 'noUniqueId' }]\n      await database\n        .setData('2021', obj)\n        .then((resp) => {\n          console.log(resp)\n        })\n        .catch((error) => {\n          console.log(error)\n        })\n\n      return { message: `Dados de ${lastDay} atualizados com sucesso.`, code: 200 }\n    } catch (error) {\n      return {\n        data: {\n          message: 'Estamos com indisponibilidade no momento, tente novamente mais tarde!',\n          ...error,\n        },\n        code: 500,\n      }\n    }\n  }\n\n  async getDatabase(initDate) {\n    try {\n      const year = Util.getToday().split('-')[0]\n      const availableDays = this.robot.getAvailableDays('', year, initDate)\n      const database = await this.robot.mountDatabase(availableDays)\n      return database\n    } catch (error) {\n      console.log(error)\n      console.log('Error in getDatabase.')\n      await this.delay()\n      return this.getDatabase(initDate)\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}