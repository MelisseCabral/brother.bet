{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Scrapper from './Scrapper';\nimport FactoryFifaArena from './FactoryFifaArena';\n\nconst Database = require('@brother.bet/Database');\n\nconst Api = require('@brother.bet/Api');\n\nconst Util = require('@brother.bet/Util');\n\nexport default class ServiceFifaArena {\n  constructor() {\n    this.baseUrl = 'https://brother.bet';\n    this.dateYesterday = this.getYestedayDate();\n  }\n\n  static async updateFifaArena() {\n    try {\n      const contentHTML = await Scrapper.getPageHTML('http://stats.cyberarena.live/results.aspx?tab=fifa21', '2021-02-01');\n      const data = await FactoryFifaArena.getGamesResult(contentHTML);\n      const api = new Api('https://brother.bet').api;\n      const database = new Database(api);\n      console.log(this.dateYesterday());\n      /*       const obj = [{ date: '2021.03.05', data: data, id: 'noUniqueId' }]\n      await database\n        .setData('2021', obj)\n        .then((resp) => {\n          console.log(resp)\n        })\n        .catch((error) => {\n          console.log(error)\n        }) */\n\n      return {\n        message: 'Dados atualizados corretamente',\n        code: 200\n      };\n    } catch (error) {\n      return {\n        data: _objectSpread({\n          message: 'Estamos com indisponibilidade no momento, tente novamente mais tarde!'\n        }, error),\n        code: 500\n      };\n    }\n  }\n\n  async getDatabase(initDate) {\n    try {\n      const year = Util.getToday().split('-')[0];\n      const availableDays = this.robot.getAvailableDays('', year, initDate);\n      const database = await this.robot.mountDatabase(availableDays);\n      return database;\n    } catch (error) {\n      console.log(error);\n      console.log('Error in getDatabase.');\n      await this.delay();\n      return this.getDatabase(initDate);\n    }\n  }\n\n  getYestedayDate() {\n    const date = new Date();\n    date.setDate(date.getDate() - 1);\n    return `${date.getFullYear}.${date.getMonth}.${date.getDate}`;\n  }\n\n}","map":{"version":3,"sources":["/Users/mel/Desktop/brother.bet/packages/web/src/pages/api/BotFifaArena/ServiceFifaArena.js"],"names":["Scrapper","FactoryFifaArena","Database","require","Api","Util","ServiceFifaArena","constructor","baseUrl","dateYesterday","getYestedayDate","updateFifaArena","contentHTML","getPageHTML","data","getGamesResult","api","database","console","log","message","code","error","getDatabase","initDate","year","getToday","split","availableDays","robot","getAvailableDays","mountDatabase","delay","date","Date","setDate","getDate","getFullYear","getMonth"],"mappings":";;;;;;AAAA,OAAOA,QAAP,MAAqB,YAArB;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;;AACA,MAAMC,QAAQ,GAAGC,OAAO,CAAC,uBAAD,CAAxB;;AACA,MAAMC,GAAG,GAAGD,OAAO,CAAC,kBAAD,CAAnB;;AACA,MAAME,IAAI,GAAGF,OAAO,CAAC,mBAAD,CAApB;;AAEA,eAAe,MAAMG,gBAAN,CAAuB;AACpCC,EAAAA,WAAW,GAAG;AACZ,SAAKC,OAAL,GAAe,qBAAf;AACA,SAAKC,aAAL,GAAqB,KAAKC,eAAL,EAArB;AACD;;AAE2B,eAAfC,eAAe,GAAG;AAC7B,QAAI;AACF,YAAMC,WAAW,GAAG,MAAMZ,QAAQ,CAACa,WAAT,CACxB,sDADwB,EAExB,YAFwB,CAA1B;AAIA,YAAMC,IAAI,GAAG,MAAMb,gBAAgB,CAACc,cAAjB,CAAgCH,WAAhC,CAAnB;AACA,YAAMI,GAAG,GAAG,IAAIZ,GAAJ,CAAQ,qBAAR,EAA+BY,GAA3C;AACA,YAAMC,QAAQ,GAAG,IAAIf,QAAJ,CAAac,GAAb,CAAjB;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKV,aAAL,EAAZ;AACA;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEM,aAAO;AAAEW,QAAAA,OAAO,EAAE,gCAAX;AAA6CC,QAAAA,IAAI,EAAE;AAAnD,OAAP;AACD,KApBD,CAoBE,OAAOC,KAAP,EAAc;AACd,aAAO;AACLR,QAAAA,IAAI;AACFM,UAAAA,OAAO,EAAE;AADP,WAECE,KAFD,CADC;AAKLD,QAAAA,IAAI,EAAE;AALD,OAAP;AAOD;AACF;;AAEgB,QAAXE,WAAW,CAACC,QAAD,EAAW;AAC1B,QAAI;AACF,YAAMC,IAAI,GAAGpB,IAAI,CAACqB,QAAL,GAAgBC,KAAhB,CAAsB,GAAtB,EAA2B,CAA3B,CAAb;AACA,YAAMC,aAAa,GAAG,KAAKC,KAAL,CAAWC,gBAAX,CAA4B,EAA5B,EAAgCL,IAAhC,EAAsCD,QAAtC,CAAtB;AACA,YAAMP,QAAQ,GAAG,MAAM,KAAKY,KAAL,CAAWE,aAAX,CAAyBH,aAAzB,CAAvB;AACA,aAAOX,QAAP;AACD,KALD,CAKE,OAAOK,KAAP,EAAc;AACdJ,MAAAA,OAAO,CAACC,GAAR,CAAYG,KAAZ;AACAJ,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACA,YAAM,KAAKa,KAAL,EAAN;AACA,aAAO,KAAKT,WAAL,CAAiBC,QAAjB,CAAP;AACD;AACF;;AAEDd,EAAAA,eAAe,GAAG;AAChB,UAAMuB,IAAI,GAAG,IAAIC,IAAJ,EAAb;AACAD,IAAAA,IAAI,CAACE,OAAL,CAAaF,IAAI,CAACG,OAAL,KAAiB,CAA9B;AACA,WAAQ,GAAEH,IAAI,CAACI,WAAY,IAAGJ,IAAI,CAACK,QAAS,IAAGL,IAAI,CAACG,OAAQ,EAA5D;AACD;;AAxDmC","sourcesContent":["import Scrapper from './Scrapper'\nimport FactoryFifaArena from './FactoryFifaArena'\nconst Database = require('@brother.bet/Database')\nconst Api = require('@brother.bet/Api')\nconst Util = require('@brother.bet/Util')\n\nexport default class ServiceFifaArena {\n  constructor() {\n    this.baseUrl = 'https://brother.bet'\n    this.dateYesterday = this.getYestedayDate()\n  }\n\n  static async updateFifaArena() {\n    try {\n      const contentHTML = await Scrapper.getPageHTML(\n        'http://stats.cyberarena.live/results.aspx?tab=fifa21',\n        '2021-02-01'\n      )\n      const data = await FactoryFifaArena.getGamesResult(contentHTML)\n      const api = new Api('https://brother.bet').api\n      const database = new Database(api)\n      console.log(this.dateYesterday())\n      /*       const obj = [{ date: '2021.03.05', data: data, id: 'noUniqueId' }]\n      await database\n        .setData('2021', obj)\n        .then((resp) => {\n          console.log(resp)\n        })\n        .catch((error) => {\n          console.log(error)\n        }) */\n\n      return { message: 'Dados atualizados corretamente', code: 200 }\n    } catch (error) {\n      return {\n        data: {\n          message: 'Estamos com indisponibilidade no momento, tente novamente mais tarde!',\n          ...error,\n        },\n        code: 500,\n      }\n    }\n  }\n\n  async getDatabase(initDate) {\n    try {\n      const year = Util.getToday().split('-')[0]\n      const availableDays = this.robot.getAvailableDays('', year, initDate)\n      const database = await this.robot.mountDatabase(availableDays)\n      return database\n    } catch (error) {\n      console.log(error)\n      console.log('Error in getDatabase.')\n      await this.delay()\n      return this.getDatabase(initDate)\n    }\n  }\n\n  getYestedayDate() {\n    const date = new Date()\n    date.setDate(date.getDate() - 1)\n    return `${date.getFullYear}.${date.getMonth}.${date.getDate}`\n  }\n}\n"]},"metadata":{},"sourceType":"module"}